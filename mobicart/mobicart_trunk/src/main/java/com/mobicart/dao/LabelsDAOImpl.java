package com.mobicart.dao;

import com.ibatis.sqlmap.client.SqlMapClient;
import com.mobicart.dto.LabelsDto;
import com.mobicart.model.Labels;
import com.mobicart.model.LabelsExample;
import com.mobicart.util.CommonUtils;

import java.sql.SQLException;
import java.util.List;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

public class LabelsDAOImpl extends SqlMapClientDaoSupport implements LabelsDAO {

	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table labels
	 * @ibatorgenerated  Tue Jun 28 17:25:47 IST 2011
	 */
	//private SqlMapClient sqlMapClient;

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table labels
	 * @ibatorgenerated  Tue Jun 28 17:25:47 IST 2011
	 */
	/*public LabelsDAOImpl(SqlMapClient sqlMapClient) {
		super();
		this.sqlMapClient = sqlMapClient;
	}*/

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table labels
	 * @ibatorgenerated  Tue Jun 28 17:25:47 IST 2011
	 */
	public int countLabelsByExample(LabelsExample example) throws SQLException {
		Integer count = (Integer) getSqlMapClientTemplate().queryForObject(
				"labels.ibatorgenerated_countByExample", example);
		return count.intValue();
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table labels
	 * @ibatorgenerated  Tue Jun 28 17:25:47 IST 2011
	 */
	public int deleteLabelsByExample(LabelsExample example) throws SQLException {
		int rows = getSqlMapClientTemplate().delete(
				"labels.ibatorgenerated_deleteByExample", example);
		return rows;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table labels
	 * @ibatorgenerated  Tue Jun 28 17:25:47 IST 2011
	 */
	public int deleteLabelsByPrimaryKey(Long labelId) throws SQLException {
		Labels key = new Labels();
		key.setLabelId(labelId);
		int rows = getSqlMapClientTemplate().delete(
				"labels.ibatorgenerated_deleteByPrimaryKey", key);
		return rows;
	}
	
	
	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table labels
	 * @ibatorgenerated  Tue Jun 28 17:25:47 IST 2011
	 */
	public int deleteLabelsByMerchantId(Long merchantId) throws SQLException {
		Labels key = new Labels();		
		key.setMerchantId(merchantId);
		int rows = getSqlMapClientTemplate().delete(
				"labels.ibatorgenerated_deleteByMerchantId", key);
		return rows;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table labels
	 * @ibatorgenerated  Tue Jun 28 17:25:47 IST 2011
	 */
	public void insertLabels(Labels record) throws SQLException {
		getSqlMapClientTemplate().insert("labels.ibatorgenerated_insert", record);
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table labels
	 * @ibatorgenerated  Tue Jun 28 17:25:47 IST 2011
	 */
	public void insertLabelsSelective(Labels record) throws SQLException {
		getSqlMapClientTemplate().insert("labels.ibatorgenerated_insertSelective", record);
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table labels
	 * @ibatorgenerated  Tue Jun 28 17:25:47 IST 2011
	 */
	public List selectLabelsByExampleWithBLOBs(LabelsExample example)
			throws SQLException {
		List list = getSqlMapClientTemplate().queryForList(
				"labels.ibatorgenerated_selectByExampleWithBLOBs", example);
		return list;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table labels
	 * @ibatorgenerated  Tue Jun 28 17:25:47 IST 2011
	 */
	public List selectLabelsByExampleWithoutBLOBs(LabelsExample example)
			throws SQLException {
		List list = getSqlMapClientTemplate().queryForList(
				"labels.ibatorgenerated_selectByExample", example);
		return list;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table labels
	 * @ibatorgenerated  Tue Jun 28 17:25:47 IST 2011
	 */
	public Labels selectLabelsByPrimaryKey(Long labelId) throws SQLException {
		Labels key = new Labels();
		key.setLabelId(labelId);
		Labels record = (Labels) getSqlMapClientTemplate().queryForObject(
				"labels.ibatorgenerated_selectByPrimaryKey", key);
		return record;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table labels
	 * @ibatorgenerated  Tue Jun 28 17:25:47 IST 2011
	 */
	public int updateLabelsByExampleSelective(Labels record,
			LabelsExample example) throws SQLException {
		UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
		int rows = getSqlMapClientTemplate().update(
				"labels.ibatorgenerated_updateByExampleSelective", parms);
		return rows;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table labels
	 * @ibatorgenerated  Tue Jun 28 17:25:47 IST 2011
	 */
	public int updateLabelsByExampleWithBLOBs(Labels record,
			LabelsExample example) throws SQLException {
		UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
		int rows = getSqlMapClientTemplate().update(
				"labels.ibatorgenerated_updateByExampleWithBLOBs", parms);
		return rows;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table labels
	 * @ibatorgenerated  Tue Jun 28 17:25:47 IST 2011
	 */
	public int updateLabelsByExampleWithoutBLOBs(Labels record,
			LabelsExample example) throws SQLException {
		UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
		int rows = getSqlMapClientTemplate().update(
				"labels.ibatorgenerated_updateByExample", parms);
		return rows;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table labels
	 * @ibatorgenerated  Tue Jun 28 17:25:47 IST 2011
	 */
	public int updateLabelsByPrimaryKeySelective(Labels record)
			throws SQLException {
		int rows = getSqlMapClientTemplate().update(
				"labels.ibatorgenerated_updateByPrimaryKeySelective", record);
		return rows;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table labels
	 * @ibatorgenerated  Tue Jun 28 17:25:47 IST 2011
	 */
	public int updateLabelsByPrimaryKeyWithBLOBs(Labels record)
			throws SQLException {
		int rows = getSqlMapClientTemplate().update(
				"labels.ibatorgenerated_updateByPrimaryKeyWithBLOBs", record);
		return rows;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table labels
	 * @ibatorgenerated  Tue Jun 28 17:25:47 IST 2011
	 */
	public int updateLabelsByPrimaryKeyWithoutBLOBs(Labels record)
			throws SQLException {
		int rows = getSqlMapClientTemplate().update(
				"labels.ibatorgenerated_updateByPrimaryKey", record);
		return rows;
	}

	/**
	 * This class was generated by Apache iBATIS ibator. This class corresponds to the database table labels
	 * @ibatorgenerated  Tue Jun 28 17:25:47 IST 2011
	 */
	private static class UpdateByExampleParms extends LabelsExample {
		private Object record;

		public UpdateByExampleParms(Object record, LabelsExample example) {
			super(example);
			this.record = record;
		}

		public Object getRecord() {
			return record;
		}
	}
	
	
	public List<LabelsDto> getAllIphoneLabelsByMerchantId(Long merchantId) throws SQLException {
		List<LabelsDto> labelsDtoList = getSqlMapClientTemplate().queryForList("labels.selectAllIphoneLabelsByMerchantId", merchantId);
		return labelsDtoList;
	}
	
	public List<LabelsDto> getAllWebLabelsByMerchantId(Long merchantId) throws SQLException {
		List<LabelsDto> labelsDtoList = getSqlMapClientTemplate().queryForList("labels.selectAllWebLabelsByMerchantId", merchantId);
		return labelsDtoList;
	}
	
	public String getWebKeyLabelValueByMerchantId(String labelKey, Long merchantId) throws SQLException {
		Labels key = new Labels();
		key.setLabelKey(labelKey);
		key.setMerchantId(merchantId);
		//Labels record = (Labels) getSqlMapClientTemplate().queryForObject("labels.getKeyLabelValueByMerchant", key);
		LabelsDto labelsDto = (LabelsDto) getSqlMapClientTemplate().queryForObject( "labels.getKeyLabelValueByMerchant", key);
	
		String labelv = "";
		//labelsDto.getLabelValue();
	try{
		if(labelsDto==null){
			labelsDto = (LabelsDto) getSqlMapClientTemplate().queryForObject( "labels.getKeyLabelValueByDefault", key);			
		}
		labelv = labelsDto.getLabelValue();
	}catch (NullPointerException e) {
		e.printStackTrace();
	}
	
	
		return labelv;
	}
	
	public List<LabelsDto> getAllIphoneLabels() throws SQLException {
		List<LabelsDto> labelsDtoList = getSqlMapClientTemplate().queryForList("labels.selectAllIphoneLabels");
		return labelsDtoList;
	}
	
	public List<LabelsDto> getAllWebLabels() throws SQLException {
		List<LabelsDto> labelsDtoList = getSqlMapClientTemplate().queryForList("labels.selectAllWebLabels");
		return labelsDtoList;
	}

	@Override
	public Boolean isLabelInSync(Long merchantId, String dateAdded)
			throws SQLException {
		
		Labels labels = new Labels();
		labels.setMerchantId(merchantId);
		labels.setDateAdded(CommonUtils.formatStringToTimestamp("yyyy-MM-dd HH:mm:ss", dateAdded));
		
		LabelsDto labelsDto = (LabelsDto) getSqlMapClientTemplate().queryForObject(
				"labels.isLabelInSync", labels);
		
		 if(labelsDto.getCount() > 0){
			 return true;
		 }
		
		
		return false;
	}
	
	
	
}