package com.mobicart.model;



import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DiskSpacePricingExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table disk_space_pricing
     *
     * @ibatorgenerated Tue Apr 12 11:19:33 IST 2011
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table disk_space_pricing
     *
     * @ibatorgenerated Tue Apr 12 11:19:33 IST 2011
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table disk_space_pricing
     *
     * @ibatorgenerated Tue Apr 12 11:19:33 IST 2011
     */
    public DiskSpacePricingExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table disk_space_pricing
     *
     * @ibatorgenerated Tue Apr 12 11:19:33 IST 2011
     */
    protected DiskSpacePricingExample(DiskSpacePricingExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table disk_space_pricing
     *
     * @ibatorgenerated Tue Apr 12 11:19:33 IST 2011
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table disk_space_pricing
     *
     * @ibatorgenerated Tue Apr 12 11:19:33 IST 2011
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table disk_space_pricing
     *
     * @ibatorgenerated Tue Apr 12 11:19:33 IST 2011
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table disk_space_pricing
     *
     * @ibatorgenerated Tue Apr 12 11:19:33 IST 2011
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table disk_space_pricing
     *
     * @ibatorgenerated Tue Apr 12 11:19:33 IST 2011
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table disk_space_pricing
     *
     * @ibatorgenerated Tue Apr 12 11:19:33 IST 2011
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table disk_space_pricing
     *
     * @ibatorgenerated Tue Apr 12 11:19:33 IST 2011
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table disk_space_pricing
     *
     * @ibatorgenerated Tue Apr 12 11:19:33 IST 2011
     */
    public static class Criteria {
        protected List<String> criteriaWithoutValue;

        protected List<Map<String, Object>> criteriaWithSingleValue;

        protected List<Map<String, Object>> criteriaWithListValue;

        protected List<Map<String, Object>> criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList<String>();
            criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
            criteriaWithListValue = new ArrayList<Map<String, Object>>();
            criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List<String> getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List<Map<String, Object>> getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List<Map<String, Object>> getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List<Map<String, Object>> getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List<? extends Object> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List<Object> list = new ArrayList<Object>();
            list.add(value1);
            list.add(value2);
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return this;
        }

        public Criteria andIdEqualTo(Long value) {
            addCriterion("id =", value, "id");
            return this;
        }

        public Criteria andIdNotEqualTo(Long value) {
            addCriterion("id <>", value, "id");
            return this;
        }

        public Criteria andIdGreaterThan(Long value) {
            addCriterion("id >", value, "id");
            return this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Long value) {
            addCriterion("id >=", value, "id");
            return this;
        }

        public Criteria andIdLessThan(Long value) {
            addCriterion("id <", value, "id");
            return this;
        }

        public Criteria andIdLessThanOrEqualTo(Long value) {
            addCriterion("id <=", value, "id");
            return this;
        }

        public Criteria andIdIn(List<Long> values) {
            addCriterion("id in", values, "id");
            return this;
        }

        public Criteria andIdNotIn(List<Long> values) {
            addCriterion("id not in", values, "id");
            return this;
        }

        public Criteria andIdBetween(Long value1, Long value2) {
            addCriterion("id between", value1, value2, "id");
            return this;
        }

        public Criteria andIdNotBetween(Long value1, Long value2) {
            addCriterion("id not between", value1, value2, "id");
            return this;
        }

        public Criteria andIMinLimitIsNull() {
            addCriterion("i_min_limit is null");
            return this;
        }

        public Criteria andIMinLimitIsNotNull() {
            addCriterion("i_min_limit is not null");
            return this;
        }

        public Criteria andIMinLimitEqualTo(Long value) {
            addCriterion("i_min_limit =", value, "iMinLimit");
            return this;
        }

        public Criteria andIMinLimitNotEqualTo(Long value) {
            addCriterion("i_min_limit <>", value, "iMinLimit");
            return this;
        }

        public Criteria andIMinLimitGreaterThan(Long value) {
            addCriterion("i_min_limit >", value, "iMinLimit");
            return this;
        }

        public Criteria andIMinLimitGreaterThanOrEqualTo(Long value) {
            addCriterion("i_min_limit >=", value, "iMinLimit");
            return this;
        }

        public Criteria andIMinLimitLessThan(Long value) {
            addCriterion("i_min_limit <", value, "iMinLimit");
            return this;
        }

        public Criteria andIMinLimitLessThanOrEqualTo(Long value) {
            addCriterion("i_min_limit <=", value, "iMinLimit");
            return this;
        }

        public Criteria andIMinLimitIn(List<Long> values) {
            addCriterion("i_min_limit in", values, "iMinLimit");
            return this;
        }

        public Criteria andIMinLimitNotIn(List<Long> values) {
            addCriterion("i_min_limit not in", values, "iMinLimit");
            return this;
        }

        public Criteria andIMinLimitBetween(Long value1, Long value2) {
            addCriterion("i_min_limit between", value1, value2, "iMinLimit");
            return this;
        }

        public Criteria andIMinLimitNotBetween(Long value1, Long value2) {
            addCriterion("i_min_limit not between", value1, value2, "iMinLimit");
            return this;
        }

        public Criteria andIMaxLimitIsNull() {
            addCriterion("i_max_limit is null");
            return this;
        }

        public Criteria andIMaxLimitIsNotNull() {
            addCriterion("i_max_limit is not null");
            return this;
        }

        public Criteria andIMaxLimitEqualTo(Long value) {
            addCriterion("i_max_limit =", value, "iMaxLimit");
            return this;
        }

        public Criteria andIMaxLimitNotEqualTo(Long value) {
            addCriterion("i_max_limit <>", value, "iMaxLimit");
            return this;
        }

        public Criteria andIMaxLimitGreaterThan(Long value) {
            addCriterion("i_max_limit >", value, "iMaxLimit");
            return this;
        }

        public Criteria andIMaxLimitGreaterThanOrEqualTo(Long value) {
            addCriterion("i_max_limit >=", value, "iMaxLimit");
            return this;
        }

        public Criteria andIMaxLimitLessThan(Long value) {
            addCriterion("i_max_limit <", value, "iMaxLimit");
            return this;
        }

        public Criteria andIMaxLimitLessThanOrEqualTo(Long value) {
            addCriterion("i_max_limit <=", value, "iMaxLimit");
            return this;
        }

        public Criteria andIMaxLimitIn(List<Long> values) {
            addCriterion("i_max_limit in", values, "iMaxLimit");
            return this;
        }

        public Criteria andIMaxLimitNotIn(List<Long> values) {
            addCriterion("i_max_limit not in", values, "iMaxLimit");
            return this;
        }

        public Criteria andIMaxLimitBetween(Long value1, Long value2) {
            addCriterion("i_max_limit between", value1, value2, "iMaxLimit");
            return this;
        }

        public Criteria andIMaxLimitNotBetween(Long value1, Long value2) {
            addCriterion("i_max_limit not between", value1, value2, "iMaxLimit");
            return this;
        }

        public Criteria andFPriceIsNull() {
            addCriterion("f_price is null");
            return this;
        }

        public Criteria andFPriceIsNotNull() {
            addCriterion("f_price is not null");
            return this;
        }

        public Criteria andFPriceEqualTo(BigDecimal value) {
            addCriterion("f_price =", value, "fPrice");
            return this;
        }

        public Criteria andFPriceNotEqualTo(BigDecimal value) {
            addCriterion("f_price <>", value, "fPrice");
            return this;
        }

        public Criteria andFPriceGreaterThan(BigDecimal value) {
            addCriterion("f_price >", value, "fPrice");
            return this;
        }

        public Criteria andFPriceGreaterThanOrEqualTo(BigDecimal value) {
            addCriterion("f_price >=", value, "fPrice");
            return this;
        }

        public Criteria andFPriceLessThan(BigDecimal value) {
            addCriterion("f_price <", value, "fPrice");
            return this;
        }

        public Criteria andFPriceLessThanOrEqualTo(BigDecimal value) {
            addCriterion("f_price <=", value, "fPrice");
            return this;
        }

        public Criteria andFPriceIn(List<BigDecimal> values) {
            addCriterion("f_price in", values, "fPrice");
            return this;
        }

        public Criteria andFPriceNotIn(List<BigDecimal> values) {
            addCriterion("f_price not in", values, "fPrice");
            return this;
        }

        public Criteria andFPriceBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("f_price between", value1, value2, "fPrice");
            return this;
        }

        public Criteria andFPriceNotBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("f_price not between", value1, value2, "fPrice");
            return this;
        }
    }
}