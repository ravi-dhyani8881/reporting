package com.mobicart.model;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class AppDeviceTokensExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table app_device_tokens
     *
     * @ibatorgenerated Thu Feb 24 10:25:32 IST 2011
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table app_device_tokens
     *
     * @ibatorgenerated Thu Feb 24 10:25:32 IST 2011
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table app_device_tokens
     *
     * @ibatorgenerated Thu Feb 24 10:25:32 IST 2011
     */
    public AppDeviceTokensExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table app_device_tokens
     *
     * @ibatorgenerated Thu Feb 24 10:25:32 IST 2011
     */
    protected AppDeviceTokensExample(AppDeviceTokensExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table app_device_tokens
     *
     * @ibatorgenerated Thu Feb 24 10:25:32 IST 2011
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table app_device_tokens
     *
     * @ibatorgenerated Thu Feb 24 10:25:32 IST 2011
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table app_device_tokens
     *
     * @ibatorgenerated Thu Feb 24 10:25:32 IST 2011
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table app_device_tokens
     *
     * @ibatorgenerated Thu Feb 24 10:25:32 IST 2011
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table app_device_tokens
     *
     * @ibatorgenerated Thu Feb 24 10:25:32 IST 2011
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table app_device_tokens
     *
     * @ibatorgenerated Thu Feb 24 10:25:32 IST 2011
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table app_device_tokens
     *
     * @ibatorgenerated Thu Feb 24 10:25:32 IST 2011
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table app_device_tokens
     *
     * @ibatorgenerated Thu Feb 24 10:25:32 IST 2011
     */
    public static class Criteria {
        protected List<String> criteriaWithoutValue;

        protected List<Map<String, Object>> criteriaWithSingleValue;

        protected List<Map<String, Object>> criteriaWithListValue;

        protected List<Map<String, Object>> criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList<String>();
            criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
            criteriaWithListValue = new ArrayList<Map<String, Object>>();
            criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List<String> getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List<Map<String, Object>> getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List<Map<String, Object>> getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List<Map<String, Object>> getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List<? extends Object> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List<Object> list = new ArrayList<Object>();
            list.add(value1);
            list.add(value2);
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(iter.next().getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return this;
        }

        public Criteria andIdEqualTo(Long value) {
            addCriterion("id =", value, "id");
            return this;
        }

        public Criteria andIdNotEqualTo(Long value) {
            addCriterion("id <>", value, "id");
            return this;
        }

        public Criteria andIdGreaterThan(Long value) {
            addCriterion("id >", value, "id");
            return this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Long value) {
            addCriterion("id >=", value, "id");
            return this;
        }

        public Criteria andIdLessThan(Long value) {
            addCriterion("id <", value, "id");
            return this;
        }

        public Criteria andIdLessThanOrEqualTo(Long value) {
            addCriterion("id <=", value, "id");
            return this;
        }

        public Criteria andIdIn(List<Long> values) {
            addCriterion("id in", values, "id");
            return this;
        }

        public Criteria andIdNotIn(List<Long> values) {
            addCriterion("id not in", values, "id");
            return this;
        }

        public Criteria andIdBetween(Long value1, Long value2) {
            addCriterion("id between", value1, value2, "id");
            return this;
        }

        public Criteria andIdNotBetween(Long value1, Long value2) {
            addCriterion("id not between", value1, value2, "id");
            return this;
        }

        public Criteria andAppIdIsNull() {
            addCriterion("app_id is null");
            return this;
        }

        public Criteria andAppIdIsNotNull() {
            addCriterion("app_id is not null");
            return this;
        }

        public Criteria andAppIdEqualTo(Long value) {
            addCriterion("app_id =", value, "appId");
            return this;
        }

        public Criteria andAppIdNotEqualTo(Long value) {
            addCriterion("app_id <>", value, "appId");
            return this;
        }

        public Criteria andAppIdGreaterThan(Long value) {
            addCriterion("app_id >", value, "appId");
            return this;
        }

        public Criteria andAppIdGreaterThanOrEqualTo(Long value) {
            addCriterion("app_id >=", value, "appId");
            return this;
        }

        public Criteria andAppIdLessThan(Long value) {
            addCriterion("app_id <", value, "appId");
            return this;
        }

        public Criteria andAppIdLessThanOrEqualTo(Long value) {
            addCriterion("app_id <=", value, "appId");
            return this;
        }

        public Criteria andAppIdIn(List<Long> values) {
            addCriterion("app_id in", values, "appId");
            return this;
        }

        public Criteria andAppIdNotIn(List<Long> values) {
            addCriterion("app_id not in", values, "appId");
            return this;
        }

        public Criteria andAppIdBetween(Long value1, Long value2) {
            addCriterion("app_id between", value1, value2, "appId");
            return this;
        }

        public Criteria andAppIdNotBetween(Long value1, Long value2) {
            addCriterion("app_id not between", value1, value2, "appId");
            return this;
        }

        public Criteria andTokenIdIsNull() {
            addCriterion("token_id is null");
            return this;
        }

        public Criteria andTokenIdIsNotNull() {
            addCriterion("token_id is not null");
            return this;
        }

        public Criteria andTokenIdEqualTo(String value) {
            addCriterion("token_id =", value, "tokenId");
            return this;
        }

        public Criteria andTokenIdNotEqualTo(String value) {
            addCriterion("token_id <>", value, "tokenId");
            return this;
        }

        public Criteria andTokenIdGreaterThan(String value) {
            addCriterion("token_id >", value, "tokenId");
            return this;
        }

        public Criteria andTokenIdGreaterThanOrEqualTo(String value) {
            addCriterion("token_id >=", value, "tokenId");
            return this;
        }

        public Criteria andTokenIdLessThan(String value) {
            addCriterion("token_id <", value, "tokenId");
            return this;
        }

        public Criteria andTokenIdLessThanOrEqualTo(String value) {
            addCriterion("token_id <=", value, "tokenId");
            return this;
        }

        public Criteria andTokenIdLike(String value) {
            addCriterion("token_id like", value, "tokenId");
            return this;
        }

        public Criteria andTokenIdNotLike(String value) {
            addCriterion("token_id not like", value, "tokenId");
            return this;
        }

        public Criteria andTokenIdIn(List<String> values) {
            addCriterion("token_id in", values, "tokenId");
            return this;
        }

        public Criteria andTokenIdNotIn(List<String> values) {
            addCriterion("token_id not in", values, "tokenId");
            return this;
        }

        public Criteria andTokenIdBetween(String value1, String value2) {
            addCriterion("token_id between", value1, value2, "tokenId");
            return this;
        }

        public Criteria andTokenIdNotBetween(String value1, String value2) {
            addCriterion("token_id not between", value1, value2, "tokenId");
            return this;
        }
        
        
        public Criteria andLongitudeIsNull() {
            addCriterion("longitude is null");
            return this;
        }

        public Criteria andLongitudeIsNotNull() {
            addCriterion("longitude is not null");
            return this;
        }

        public Criteria andLongitudeEqualTo(Double value) {
            addCriterion("longitude =", value, "longitude");
            return this;
        }

        public Criteria andLongitudeNotEqualTo(Double value) {
            addCriterion("longitude <>", value, "longitude");
            return this;
        }

        public Criteria andLongitudeGreaterThan(Double value) {
            addCriterion("longitude >", value, "longitude");
            return this;
        }

        public Criteria andLongitudeGreaterThanOrEqualTo(Double value) {
            addCriterion("longitude >=", value, "longitude");
            return this;
        }

        public Criteria andLongitudeLessThan(Double value) {
            addCriterion("longitude <", value, "longitude");
            return this;
        }

        public Criteria andLongitudeLessThanOrEqualTo(Double value) {
            addCriterion("longitude <=", value, "longitude");
            return this;
        }

        public Criteria andLongitudeLike(Double value) {
            addCriterion("longitude like", value, "longitude");
            return this;
        }

        public Criteria andLongitudeNotLike(Double value) {
            addCriterion("longitude not like", value, "longitude");
            return this;
        }

        public Criteria andLongitudeIn(List<Double> values) {
            addCriterion("longitude in", values, "longitude");
            return this;
        }

        public Criteria andLongitudeNotIn(List<Double> values) {
            addCriterion("longitude not in", values, "longitude");
            return this;
        }

        public Criteria andLongitudeBetween(Double value1, Double value2) {
            addCriterion("longitude between", value1, value2, "longitude");
            return this;
        }

        public Criteria andLongitudeNotBetween(Double value1, Double value2) {
            addCriterion("longitude not between", value1, value2, "longitude");
            return this;
        }
        
        
        public Criteria andLatitudeIsNull() {
            addCriterion("latitude is null");
            return this;
        }

        public Criteria andLatitudeIsNotNull() {
            addCriterion("latitude is not null");
            return this;
        }

        public Criteria andLatitudeEqualTo(Double value) {
            addCriterion("latitude =", value, "latitude");
            return this;
        }

        public Criteria andLatitudeNotEqualTo(Double value) {
            addCriterion("latitude <>", value, "latitude");
            return this;
        }

        public Criteria andLatitudeGreaterThan(Double value) {
            addCriterion("latitude >", value, "latitude");
            return this;
        }

        public Criteria andLatitudeGreaterThanOrEqualTo(Double value) {
            addCriterion("latitude >=", value, "latitude");
            return this;
        }

        public Criteria andLatitudeLessThan(Double value) {
            addCriterion("latitude <", value, "latitude");
            return this;
        }

        public Criteria andLatitudeLessThanOrEqualTo(Double value) {
            addCriterion("latitude <=", value, "latitude");
            return this;
        }

        public Criteria andLatitudeLike(Double value) {
            addCriterion("latitude like", value, "latitude");
            return this;
        }

        public Criteria andLatitudeNotLike(Double value) {
            addCriterion("latitude not like", value, "latitude");
            return this;
        }

        public Criteria andLatitudeIn(List<Double> values) {
            addCriterion("latitude in", values, "latitude");
            return this;
        }

        public Criteria andLatitudeNotIn(List<Double> values) {
            addCriterion("latitude not in", values, "latitude");
            return this;
        }

        public Criteria andLatitudeBetween(Double value1, Double value2) {
            addCriterion("latitude between", value1, value2, "latitude");
            return this;
        }

        public Criteria andLatitudeNotBetween(Double value1, Double value2) {
            addCriterion("latitude not between", value1, value2, "latitude");
            return this;
        } 
        
        

        public Criteria andRegdateIsNull() {
            addCriterion("regdate is null");
            return this;
        }

        public Criteria andRegdateIsNotNull() {
            addCriterion("regdate is not null");
            return this;
        }

        public Criteria andRegdateEqualTo(Date value) {
            addCriterionForJDBCDate("regdate =", value, "regdate");
            return this;
        }

        public Criteria andRegdateNotEqualTo(Date value) {
            addCriterionForJDBCDate("regdate <>", value, "regdate");
            return this;
        }

        public Criteria andRegdateGreaterThan(Date value) {
            addCriterionForJDBCDate("regdate >", value, "regdate");
            return this;
        }

        public Criteria andRegdateGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("regdate >=", value, "regdate");
            return this;
        }

        public Criteria andRegdateLessThan(Date value) {
            addCriterionForJDBCDate("regdate <", value, "regdate");
            return this;
        }

        public Criteria andRegdateLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("regdate <=", value, "regdate");
            return this;
        }

        public Criteria andRegdateIn(List<Date> values) {
            addCriterionForJDBCDate("regdate in", values, "regdate");
            return this;
        }

        public Criteria andRegdateNotIn(List<Date> values) {
            addCriterionForJDBCDate("regdate not in", values, "regdate");
            return this;
        }

        public Criteria andRegdateBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("regdate between", value1, value2, "regdate");
            return this;
        }

        public Criteria andRegdateNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("regdate not between", value1, value2, "regdate");
            return this;
        }
        
        
        /*manualy added*/
        public Criteria andAppTypeIsNull() {
            addCriterion("apptype is null");
            return this;
        }

        public Criteria andAppTypeIsNotNull() {
            addCriterion("apptype is not null");
            return this;
        }

        public Criteria andAppTypeEqualTo(String value) {
            addCriterion("apptype =", value, "appType");
            return this;
        }

        public Criteria andAppTypeNotEqualTo(String value) {
            addCriterion("apptype <>", value, "appType");
            return this;
        }

        public Criteria andAppTypeGreaterThan(String value) {
            addCriterion("apptype >", value, "appType");
            return this;
        }

        public Criteria andAppTypeGreaterThanOrEqualTo(String value) {
            addCriterion("apptype >=", value, "appType");
            return this;
        }

        public Criteria andAppTypeLessThan(String value) {
            addCriterion("apptype <", value, "appType");
            return this;
        }

        public Criteria andAppTypeLessThanOrEqualTo(String value) {
            addCriterion("apptype <=", value, "appType");
            return this;
        }

        public Criteria andAppTypeLike(String value) {
            addCriterion("apptype like", value, "appType");
            return this;
        }

        public Criteria andAppTypeNotLike(String value) {
            addCriterion("apptype not like", value, "appType");
            return this;
        }

        public Criteria andAppTypeIn(List<String> values) {
            addCriterion("apptype in", values, "appType");
            return this;
        }

        public Criteria andAppTypeNotIn(List<String> values) {
            addCriterion("apptype not in", values, "appType");
            return this;
        }

        public Criteria andAppTypeBetween(String value1, String value2) {
            addCriterion("apptype between", value1, value2, "appType");
            return this;
        }

        public Criteria andAppTypeNotBetween(String value1, String value2) {
            addCriterion("apptype not between", value1, value2, "appType");
            return this;
        }
        
        
        
    }
}